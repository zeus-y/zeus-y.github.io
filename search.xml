<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>MarkDown常用语法</title>
    <url>/2022/06/26/markdown/</url>
    <content><![CDATA[<p>Markdown是一种用来写作的轻量级标记语言，是能够让我们专注写作内容的利器。在Markdown的世界里，没有复杂冗长的语法，也没有形式多样的排版选择，除了简单还是简单。Markdown以最常用易记的符号语法作为标记，不打扰创作灵感的同时让文字版式清晰明了。也正是因为简单，Markdown在编辑圈里颇受欢迎。因此这里给出了markdown的常用的相关语法。</p>
<h2 id="Markdown的哲学"><a href="#Markdown的哲学" class="headerlink" title="Markdown的哲学"></a>Markdown的哲学</h2><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>　　Markdown语法则是把最常用的排版需求通过标点符号来表述，一个标点加上文字就完成了排版，够快也够清晰。而这正是Markdown语法的意义所在：“我们坚信写作写的是内容，是你的所思所想，而非花样格式——Ulysses for Mac”。</p>
<h2 id="Markdown语法宝典"><a href="#Markdown语法宝典" class="headerlink" title="Markdown语法宝典"></a>Markdown语法宝典</h2><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><p>　　在Markdown中，如果要把文字内容定义为标题，在文字开头添加#号即可。Markdown最多支持6级标题，往下一级加多一个#即可。</p>
<p><img src="/img/article_imgs/srticle3_img1.png" alt="img"></p>
<h3 id="二、加粗，斜体，高亮"><a href="#二、加粗，斜体，高亮" class="headerlink" title="二、加粗，斜体，高亮"></a>二、加粗，斜体，高亮</h3><p>　　如果需要将文字变成斜体格式，在文字首尾各添加一个<em>号即可;加粗则是在首尾添加两个</em>号。而高亮则需要在首尾添加两个=号。</p>
<p><img src="/img/article_imgs/srticle3_img2.png" alt="img"></p>
<h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><p>　　我们习惯在首尾加双引号的做法来标记引用的内容，在Markdown上的引用语法更为简单，只需要在文本前添加向右的尖括号即可。编辑器会自动把这段引用的话独立出来，更加醒目。</p>
<p><img src="/img/article_imgs/srticle3_img3.png" alt="img"></p>
<h3 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h3><p>　　经常使用Word排版列表的小伙伴可能都会遇到列表等级错乱的情况，调整起来费时费力。在Markdown中，只需要两步就完成列表等级的划分。</p>
<p>　　Markdown列表也有无序和有序之分。首先无序列表：在文字前添加一个*号生成一级列表，二级列表只需要首行缩进到一级列表符号之后即可，以此类推。有序列表格式和一般的方式无异，标注好1、2、3点就可以显示。</p>
<p><img src="/img/article_imgs/srticle3_img4.png" alt="img"></p>
<h3 id="五、代码框"><a href="#五、代码框" class="headerlink" title="五、代码框"></a>五、代码框</h3><p>　　Markdown的代码框语法简直可以虐哭一众使用HTML的小伙伴，文本内容前后添加`号就搞定了。front…input…你说啥?</p>
<p><img src="/img/article_imgs/srticle3_img5.png" alt="img"></p>
<h3 id="六、图片和链接"><a href="#六、图片和链接" class="headerlink" title="六、图片和链接"></a>六、图片和链接</h3><p>　　在Markdown上插入图片和链接也是非常方便的。要注意的是，插入图片和链接的语法很像，区别在于一个!号。</p>
<p>　　图片语法：<img src="" alt=""></p>
<p>　　链接语法：<a href=""></a></p>
<pre><code>高级语法：设置图片的大小与位置
&lt;img src=&quot;&quot; width = &quot;600&quot; height = &quot;160&quot; div align=center /&gt;
</code></pre><h3 id="七、表格"><a href="#七、表格" class="headerlink" title="七、表格"></a>七、表格</h3><p>　　除了简单的排版语法外，Markdown还支持插入表格。不过这个表格需要自己用分隔符|“一笔一划”地生成。具体方法如下：</p>
<p><img src="/img/article_imgs/srticle3_img6.png" alt="img"></p>
<p>　　以上就是我们常用Markdown排版语法，掌握了这些语法规则足够应付日常的编辑使用。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>推荐算法工程笔记：PySpark特征工程入门总结</title>
    <url>/2022/07/09/pyspark-feature-engineering/</url>
    <content><![CDATA[<!-- # PySpark特征工程入门总结 -->
<h1 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h1><p>我们定义了一些测试数据，方便验证函数的有效性；同时对于大多数初学者来说，明白函数的输入是什么，输出是什么，才能更好的理解特征函数和使用特征：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = spark.createDataFrame([</span><br><span class="line">    (&#x27;zhu&#x27;, &quot;Hi I heard about pySpark&quot;),</span><br><span class="line">    (&#x27;xiang&#x27;, &quot;I wish python could use case classes&quot;),</span><br><span class="line">    (&#x27;yu&#x27;, &quot;Logistic regression models are neat&quot;)</span><br><span class="line">], [&quot;id&quot;, &quot;sentence&quot;])</span><br><span class="line">+-----+------------------------------------+</span><br><span class="line">|id   |sentence                            |</span><br><span class="line">+-----+------------------------------------+</span><br><span class="line">|zhu  |Hi I heard about pySpark.           |</span><br><span class="line">|xiang|I wish python could use case classes|</span><br><span class="line">|yu   |Logistic regression models are neat |</span><br><span class="line">+-----+------------------------------------+</span><br></pre></td></tr></table></figure>
<h1 id="2-数据读取"><a href="#2-数据读取" class="headerlink" title="2.数据读取"></a>2.数据读取</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># !/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">########################################################################################################################</span><br><span class="line">#  Creater        : zeus-y</span><br><span class="line">#  Description    : PySpark 特征工程工具集</span><br><span class="line">#  Modify By      :</span><br><span class="line">#  Modify Time    :</span><br><span class="line">#  Modify Content :</span><br><span class="line">#  Script Version : 2.0.0.9</span><br><span class="line">########################################################################################################################</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">from pyspark.sql import SparkSession</span><br><span class="line">spark = SparkSession.builder.appName(&#x27;DOTAd_Features_Tool&#x27;).enableHiveSupport().getOrCreate()</span><br><span class="line">spark.conf.set(&quot;spark.sql.shuffle.partitions&quot;, 1000)</span><br><span class="line">spark.conf.set(&quot;spark.default.parallelism&quot;, 2000)</span><br><span class="line"></span><br><span class="line">def get_params():</span><br><span class="line">    return &#123;</span><br><span class="line">    # Function Can be Used</span><br><span class="line">    &#x27;column1&#x27; : &quot;TFIDF&quot;,            # 词频－逆向文件频率</span><br><span class="line">    &#x27;column2&#x27; : &quot;Word2Vec&quot;,</span><br><span class="line">    &#x27;column3&#x27; : &quot;CountVectorizer&quot;,</span><br><span class="line">    &#x27;column4&#x27; : &quot;OneHotEncoder&quot;,</span><br><span class="line">    &#x27;column5&#x27; : &quot;StringIndexer&quot;,</span><br><span class="line">    &#x27;column6&#x27; : &quot;IndexToString&quot;,</span><br><span class="line">    &#x27;column7&#x27; : &quot;PCA&quot;,</span><br><span class="line">    &#x27;column8&#x27; : &quot;Binarizer&quot;,</span><br><span class="line">    &#x27;column9&#x27; : &quot;Tokenizer&quot;,</span><br><span class="line">    &#x27;column10&#x27;: &quot;StopWordsRemover&quot;, #</span><br><span class="line">    &#x27;column11&#x27;: &quot;NGram&quot;,            #</span><br><span class="line">    &#x27;column12&#x27;: &quot;DCT&quot;,              # 离散余弦变换</span><br><span class="line">    &#x27;column13&#x27;: &quot;ChiSqSelector&quot;,    # 卡方校验</span><br><span class="line">    &#x27;column14&#x27;: &quot;PearsonCorr&quot;,      # 皮尔逊系数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # Reset params</span><br><span class="line">    ######################################################################################</span><br><span class="line">    #</span><br><span class="line">    # 库名.表名</span><br><span class="line">    dataset_Name = &quot;&quot;</span><br><span class="line">    dataset = spark.sql(&quot;select * from &#123;dataset_Name&#125;&quot;.format(dataset_Name = dataset_Name)).fillna(0)</span><br><span class="line">    #</span><br><span class="line">    # 结果存储目标 库名.表名</span><br><span class="line">    saveAsTable_Name = &quot;&quot;</span><br><span class="line">    #</span><br><span class="line">    # 指定对列col进行function操作 &#123;col:function&#125;</span><br><span class="line">    params = &#123;&#x27;sentence&#x27;: &quot;TFIDF&quot;&#125;</span><br><span class="line">    #</span><br><span class="line">    ######################################################################################</span><br><span class="line">    #</span><br><span class="line">    # functionTestData</span><br><span class="line">    df = spark.createDataFrame([</span><br><span class="line">        (&#x27;zhu&#x27;, &quot;Hi I heard about pySpark&quot;),</span><br><span class="line">        (&#x27;xiang&#x27;, &quot;I wish python could use case classes&quot;),</span><br><span class="line">        (&#x27;yu&#x27;, &quot;Logistic regression models are neat&quot;)</span><br><span class="line">    ], [&quot;id&quot;, &quot;sentence&quot;])</span><br><span class="line">    # Feature Transform</span><br><span class="line">    features = featureTool(dataset,params) # Test-Model : dataset = df</span><br><span class="line">    features.show(5)</span><br><span class="line">    # Save Feature as table</span><br><span class="line">    saveResult(features,saveAsTable_Name)</span><br></pre></td></tr></table></figure>
<h1 id="3-数据存储"><a href="#3-数据存储" class="headerlink" title="3.数据存储"></a>3.数据存储</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SaveTableAs</span><br><span class="line">def saveResult(res,saveAsTable_Name=&#x27;dota_tmp.dota_features_tool_save_result&#x27;, saveFormat=&quot;orc&quot;,saveMode=&quot;overwrite&quot;):</span><br><span class="line">    res.write.saveAsTable(name=saveAsTable_Name, format=saveFormat,mode=saveMode)</span><br></pre></td></tr></table></figure>
<h1 id="4-特征函数"><a href="#4-特征函数" class="headerlink" title="4.特征函数"></a>4.特征函数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def featureTool(df,params):</span><br><span class="line">    dataCols,targetCols = df.columns,params.keys()</span><br><span class="line">    exeColumns = list(params.keys())[0]</span><br><span class="line">    exeDefFunction = params[exeColumns]</span><br><span class="line">    print(exeColumns+&quot;--&gt;&quot;+exeDefFunction+&quot;(df,&#123;exeColumns&#125;)&quot;.format(exeColumns=exeColumns))</span><br><span class="line">    exeOrder = &quot;feat=&#123;exeDef&#125;(df,&#x27;&#123;exeCols&#125;&#x27;,&#x27;&#123;outputCol&#125;&#x27;)&quot;.format(exeCols=exeColumns,exeDef=exeDefFunction,outputCol=exeDefFunction+&#x27;_&#x27;+exeColumns)</span><br><span class="line">    print(&quot;exeOrder : &quot;+exeOrder)</span><br><span class="line">    exec(exeOrder)</span><br><span class="line">    return feat</span><br></pre></td></tr></table></figure>
<h2 id="4-1-TFIDF"><a href="#4-1-TFIDF" class="headerlink" title="4.1 TFIDF"></a>4.1 TFIDF</h2><p>权重计算方法经常会和余弦相似度(cosine similarity)一同使用于向量空间模型中，用以判断两份文件之间的相似性。当前，真正在搜索引擎等实际应用中广泛使用的是Tf-idf 模型。Tf-idf 模型的主要思想是：如果词w在一篇文档d中出现的频率高，并且在其他文档中很少出现，则认为词w具有很好的区分能力，适合用来把文章d和其他文章区分开来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def TFIDF(df,inputCol=&quot;sentence&quot;,outputCol=&quot;tfidf&quot;, numFeatures=20):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    词频－逆向文件频率（TF-IDF）是一种在文本挖掘中广泛使用的特征向量化方法，它可以体现一个文档中词语在语料库中的重要程度。</span><br><span class="line">    # 总结：一个词语在一篇文章中出现次数越多, 同时在所有文档中出现次数越少, 越能够代表该文章.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import HashingTF, IDF, Tokenizer</span><br><span class="line">    tokenizerX = Tokenizer(inputCol=inputCol, outputCol=&quot;words&quot;)</span><br><span class="line">    wordsDataX = tokenizerX.transform(df)</span><br><span class="line">    hashingTFX = HashingTF(inputCol=&quot;words&quot;, outputCol=&quot;rawFeatures&quot;, numFeatures=numFeatures)</span><br><span class="line">    featurizedData = hashingTFX.transform(wordsDataX)</span><br><span class="line">    idfX = IDF(inputCol=&quot;rawFeatures&quot;, outputCol=outputCol)</span><br><span class="line">    idfModel = idfX.fit(featurizedData)</span><br><span class="line">    tfidfRes = idfModel.transform(featurizedData).drop(&#x27;words&#x27;,&#x27;rawFeatures&#x27;)</span><br><span class="line">    return tfidfRes</span><br></pre></td></tr></table></figure>
<p>上述代码输出结果如下：</p>
<p>TFIDF Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----+------------------------------------+----------------------------------------------------------------------------------------+</span><br><span class="line">|id   |sentence                            |tfidf                                                                                   |</span><br><span class="line">+-----+------------------------------------+----------------------------------------------------------------------------------------+</span><br><span class="line">|zhu  |Hi I heard about pySpark            |(20,[0,9,17],[0.6931471805599453,0.5753641449035617,1.3862943611198906])                |</span><br><span class="line">|xiang|I wish python could use case classes|(20,[2,9,13,15],[0.6931471853,1.15072071234,0.285178085,0.28768207245178085])           |</span><br><span class="line">|yu   |Logistic regression models are neat |(20,[4,6,13,15,18],[0.69314718053,0.693147453,0.287682078085,0.2876085,0.693149453])    |</span><br><span class="line">+-----+------------------------------------+----------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-2-Word2Vec"><a href="#4-2-Word2Vec" class="headerlink" title="4.2 Word2Vec"></a>4.2 Word2Vec</h2><p>word2vec模型其实就是简单化的神经网络，它可以将文本数据向量化。词向量具有良好的语义特性，是表示词语特征的常用方式。词向量每一维的值代表一个具有一定的语义和语法上解释的特征。所以，可以将词向量的每一维称为一个词语特征。词向量具有多种形式，distributed representation 是其中一种。一个 distributed representation 是一个稠密、低维的实值向量。distributed representation 的每一维表示词语的一个潜在特征，该特 征捕获了有用的句法和语义特性。可见，distributed representation 中的 distributed 一词体现了词向量这样一个特点：将词语的不同句法和语义特征分布到它的每一个维度去表示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def Word2Vec(df,inputCol=&quot;sentence&quot;,outputCol=&quot;w2v&quot;,vectorSize=100, minCount=5, numPartitions=1,</span><br><span class="line">    stepSize=0.025, maxIter=1, seed=None, windowSize=5, maxSentenceLength=1000):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Word2vec：将word转化为vector，word是顺序有意义的实体，比如文档中单词、用户依次点击的商品。</span><br><span class="line">    Word2vec 得到实体向量，可以用来度量实体间相似度，在此基础上，以下方向都可以应用：分类,聚类,推荐,句子向量,短文本分类。</span><br><span class="line">    #</span><br><span class="line">    # 两种实现方式</span><br><span class="line">    # Skip-gram：用一个词语作为输入，来预测它周围的上下文。</span><br><span class="line">    # CBOW ：用一个词语的上下文作为输入，来预测这个词语本身。</span><br><span class="line">    #</span><br><span class="line">    Spark 的 Word2vec 是一个Estimator，它采用一系列代表文档的词语来训练word2vecmodel。[Spark实现的是Skip-gram模型]</span><br><span class="line">    该模型将每个词语映射到一个固定大小的向量。</span><br><span class="line">    word2vecmodel使用文档中每个词语的平均数来将文档转换为向量，</span><br><span class="line">    然后这个向量可以作为预测的特征，来计算文档相似度计算等等。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import Word2Vec</span><br><span class="line">    from pyspark.sql.functions import split</span><br><span class="line">    # Input data: Each row is a bag of words from a sentence or document.</span><br><span class="line">    df = df.withColumn(&quot;words&quot;,split(df[inputCol],&#x27; &#x27;))</span><br><span class="line">    word2VecX = Word2Vec(</span><br><span class="line">                        vectorSize = vectorSize,</span><br><span class="line">                        minCount = minCount,</span><br><span class="line">                        inputCol = &quot;words&quot;,</span><br><span class="line">                        outputCol = outputCol,</span><br><span class="line">                        numPartitions = numPartitions,</span><br><span class="line">                        stepSize = stepSize,</span><br><span class="line">                        maxIter = maxIter,</span><br><span class="line">                        seed = seed,</span><br><span class="line">                        windowSize = windowSize,</span><br><span class="line">                        maxSentenceLength = maxSentenceLength</span><br><span class="line">                        )</span><br><span class="line">    w2vModel = word2VecX.fit(df)</span><br><span class="line">    w2vRes = w2vModel.transform(df).drop(&#x27;words&#x27;)</span><br><span class="line">    return w2vRes</span><br></pre></td></tr></table></figure>
<p>上述代码输出结果如下：</p>
<p>Word2Vec Output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----+--------------------+--------------------+</span><br><span class="line">|   id|            sentence|                 w2v|</span><br><span class="line">+-----+--------------------+--------------------+</span><br><span class="line">|  zhu|Hi I heard about ...|[0.08936496693640...|</span><br><span class="line">|xiang|I wish python cou...|[7.36715538161141...|</span><br><span class="line">|   yu|Logistic regressi...|[-0.0063562680035...|</span><br><span class="line">+-----+--------------------+--------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-3-CountVectorizer"><a href="#4-3-CountVectorizer" class="headerlink" title="4.3 CountVectorizer"></a>4.3 CountVectorizer</h2><p>Countvectorizer旨在通过计数来将一个文档转换为向量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def CountVectorizer(df,inputCol=&quot;sentence&quot;,outputCol=&quot;cv&quot;,vectorSize=200000, minCount=1.0):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Countvectorizer旨在通过计数来将一个文档转换为向量。</span><br><span class="line">    当不存在先验字典时，Countvectorizer可作为Estimator来提取词汇，并生成一个Countvectorizermodel。</span><br><span class="line">    该模型产生文档关于词语的稀疏表示，其表示可以传递给其他算法如LDA。</span><br><span class="line">    #</span><br><span class="line">    在fitting过程中，countvectorizer将根据语料库中的词频排序选出前vocabsize个词。</span><br><span class="line">    一个可选的参数minDF也影响fitting过程中，它指定词汇表中的词语在文档中最少出现的次数。</span><br><span class="line">    另一个可选的二值参数控制输出向量，如果设置为真那么所有非零的计数为1。这对于二值型离散概率模型非常有用。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import CountVectorizer</span><br><span class="line">    from pyspark.sql.functions import split</span><br><span class="line">    df = df.withColumn(&quot;words&quot;,split(df[inputCol],&#x27; &#x27;))</span><br><span class="line">    CountVectorizerX = CountVectorizer(inputCol=&quot;words&quot;, outputCol=outputCol, vocabSize=vectorSize, minDF=minCount)</span><br><span class="line">    cvModelX = CountVectorizerX.fit(df)</span><br><span class="line">    cvRes = cvModelX.transform(df).drop(&#x27;words&#x27;)</span><br><span class="line">    return cvRes</span><br></pre></td></tr></table></figure>
<p>上述代码输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CountVectorizer Output</span><br><span class="line">+-----+------------------------------------+----------------------------------------------------+</span><br><span class="line">|id   |sentence                            |cv                                                  |</span><br><span class="line">+-----+------------------------------------+----------------------------------------------------+</span><br><span class="line">|zhu  |Hi I heard about pySpark            |(16,[0,2,4,12,13],[1.0,1.0,1.0,1.0,1.0])            |</span><br><span class="line">|xiang|I wish python could use case classes|(16,[0,3,5,6,8,10,14],[1.0,1.0,1.0,1.0,1.0,1.0,1.0])|</span><br><span class="line">|yu   |Logistic regression models are neat |(16,[1,7,9,11,15],[1.0,1.0,1.0,1.0,1.0])            |</span><br><span class="line">+-----+------------------------------------+----------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-4-OneHotEncoder"><a href="#4-4-OneHotEncoder" class="headerlink" title="4.4 OneHotEncoder"></a>4.4 OneHotEncoder</h2><p>将类别特征映射为二进制向量，其中只有一个有效值(为1，其余为0)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def OneHotEncoder(df,inputCol=&quot;category&quot;,outputCol=&quot;categoryVec&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将类别特征映射为二进制向量，其中只有一个有效值(为1，其余为0)。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import OneHotEncoder, StringIndexer</span><br><span class="line">    stringIndexerX = StringIndexer(inputCol=inputCol, outputCol=&quot;categoryIndex&quot;)</span><br><span class="line">    modelX = stringIndexerX.fit(df)</span><br><span class="line">    indexed = modelX.transform(df)</span><br><span class="line">    encoderX = OneHotEncoder(inputCol=&quot;categoryIndex&quot;, outputCol=outputCol)</span><br><span class="line">    encodedX = encoderX.transform(indexed).drop(&quot;categoryIndex&quot;)</span><br><span class="line">    return encodedX</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">OneHotEncoder Output</span><br><span class="line">+-------+--------+-------------+-------------+</span><br><span class="line">|     id|category|categoryIndex|  categoryVec|</span><br><span class="line">+-------+--------+-------------+-------------+</span><br><span class="line">|    zhu|       a|          0.0|(2,[0],[1.0])|</span><br><span class="line">|xiangyu|       b|          2.0|    (2,[],[])|</span><br><span class="line">|     yu|       c|          1.0|(2,[1],[1.0])|</span><br><span class="line">|     is|       a|          0.0|(2,[0],[1.0])|</span><br><span class="line">| coming|       a|          0.0|(2,[0],[1.0])|</span><br><span class="line">|    now|       c|          1.0|(2,[1],[1.0])|</span><br><span class="line">+-------+--------+-------------+-------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-5-StringIndexer"><a href="#4-5-StringIndexer" class="headerlink" title="4.5 StringIndexer"></a>4.5 StringIndexer</h2><p>将标签索引化，然后索引数值根据标签出现的频率进行排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def StringIndexer(df,inputCol=&quot;category&quot;,outputCol=&quot;categoryVec&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将标签索引化，然后索引数值根据标签出现的频率进行排序。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import StringIndexer</span><br><span class="line">    indexerX = StringIndexer(inputCol=inputCol, outputCol=outputCol)</span><br><span class="line">    indexedX = indexerX.fit(df).transform(df)</span><br><span class="line">    return indexedX</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">StringIndexer Output</span><br><span class="line">+-----+--------------------+-----------+</span><br><span class="line">|   id|            sentence|categoryVec|</span><br><span class="line">+-----+--------------------+-----------+</span><br><span class="line">|  zhu|Hi I heard about ...|        2.0|</span><br><span class="line">|xiang|I wish python cou...|        0.0|</span><br><span class="line">|   yu|Logistic regressi...|        1.0|</span><br><span class="line">+-----+--------------------+-----------+</span><br></pre></td></tr></table></figure>
<h2 id="4-6-IndexToString"><a href="#4-6-IndexToString" class="headerlink" title="4.6 IndexToString"></a>4.6 IndexToString</h2><p>与StringIndexer对应，IndexToString将索引化标签还原成原始字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def IndexToString(df,inputCol=&quot;categoryVec&quot;,outputCol=&quot;category&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    与StringIndexer对应，IndexToString将索引化标签还原成原始字符串。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import IndexToString</span><br><span class="line">    converterX = IndexToString(inputCol=inputCol, outputCol=outputCol)</span><br><span class="line">    convertedX = converterX.transform(df)</span><br><span class="line">    return convertedX</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">IndexToString Output</span><br><span class="line">IndexToString(StringIndexer(df,&quot;sentence&quot;))</span><br><span class="line">+-----+--------------------+-----------+--------------------+</span><br><span class="line">|   id|            sentence|categoryVec|            category|</span><br><span class="line">+-----+--------------------+-----------+--------------------+</span><br><span class="line">|  zhu|Hi I heard about ...|        2.0|Hi I heard about ...|</span><br><span class="line">|xiang|I wish python cou...|        0.0|I wish python cou...|</span><br><span class="line">|   yu|Logistic regressi...|        1.0|Logistic regressi...|</span><br><span class="line">+-----+--------------------+-----------+--------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-7-PCA"><a href="#4-7-PCA" class="headerlink" title="4.7 PCA"></a>4.7 PCA</h2><p>主成分分析是一种对数据进行旋转变换的统计学方法，其本质是在线性空间中进行一个基变换，使得变换后的数据投影在一组新的”坐标轴”上的方差最大化，随后，裁剪掉变换后方差很小的”坐标轴”，剩下的新的”坐标轴”即被称为主成分，它们可以再一个较低维度的子空间中尽可能地表示原有数据的性质。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PCA Input</span><br><span class="line">+--------------------+</span><br><span class="line">|            features|</span><br><span class="line">+--------------------+</span><br><span class="line">| (5,[1,3],[1.0,7.0])|</span><br><span class="line">|[2.0,0.0,3.0,4.0,...|</span><br><span class="line">|[4.0,0.0,0.0,6.0,...|</span><br><span class="line">+--------------------+</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">def PCA(df,vectorSize=3, inputCol=&quot;features&quot;, outputCol=&quot;pcaFeatures&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    主成分分析是一种对数据进行旋转变换的统计学方法，其本质是在线性空间中进行一个基变换，</span><br><span class="line">    使得变换后的数据投影在一组新的&quot;坐标轴&quot;上的方差最大化，</span><br><span class="line">    随后，裁剪掉变换后方差很小的&quot;坐标轴&quot;，剩下的新的&quot;坐标轴&quot;即被称为主成分，</span><br><span class="line">    它们可以再一个较低维度的子空间中尽可能地表示原有数据的性质。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import PCA</span><br><span class="line">    pcaX = PCA(k=vectorSize, inputCol=inputCol, outputCol=outputCol)</span><br><span class="line">    modelX = pcaX.fit(df)</span><br><span class="line">    pcaRes = modelX.transform(df)</span><br><span class="line">    return pcaRes</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">PCA Output</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">|pcaFeatures                                                |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">|[1.6485728230883807,-4.013282700516296,-5.524543751369388] |</span><br><span class="line">|[-4.645104331781534,-1.1167972663619026,-5.524543751369387]|</span><br><span class="line">|[-6.428880535676489,-5.337951427775355,-5.524543751369389] |</span><br><span class="line">+-----------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-8-Binarizer"><a href="#4-8-Binarizer" class="headerlink" title="4.8 Binarizer"></a>4.8 Binarizer</h2><p>把数值型特征值转化成二进制(0/1)输出，设置一个阈值，大于阈值的输出1，小于阈值的输出0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def Binarizer(df,threshold=0.5, inputCol=&quot;feature&quot;, outputCol=&quot;binarized_feature&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    把数值型特征值转化成二进制(0/1)输出，设置一个阈值，大于阈值的输出1，小于阈值的输出0</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import Binarizer</span><br><span class="line">    binarizerX = Binarizer(threshold=threshold, inputCol=inputCol, outputCol=outputCol)</span><br><span class="line">    binarizedX = binarizerX.transform(df)</span><br><span class="line">    return binarizedX</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">Binarizer Output</span><br><span class="line">+---+-------+-----------------+</span><br><span class="line">| id|feature|binarized_feature|</span><br><span class="line">+---+-------+-----------------+</span><br><span class="line">|  0|    0.1|              0.0|</span><br><span class="line">|  1|    0.8|              1.0|</span><br><span class="line">|  2|    0.2|              0.0|</span><br><span class="line">+---+-------+-----------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-9-Tokenizer"><a href="#4-9-Tokenizer" class="headerlink" title="4.9 Tokenizer"></a>4.9 Tokenizer</h2><p>分词器:提供默认分词，也提供正则表达式分词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def Tokenizer(df,inputCol=&quot;sentence&quot;, outputCol=&quot;words&quot;, pattern=&quot;\\W&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    分词器:提供默认分词，也提供正则表达式分词</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import RegexTokenizer</span><br><span class="line">    regexTokenizer = RegexTokenizer(inputCol=inputCol, outputCol=outputCol, pattern=pattern)</span><br><span class="line">    regexTokenized = regexTokenizer.transform(df)</span><br><span class="line">    return regexTokenized</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">Tokenizer Output</span><br><span class="line">+-----------------------------------+------------------------------------------+------+</span><br><span class="line">|sentence                           |words                                     |tokens|</span><br><span class="line">+-----------------------------------+------------------------------------------+------+</span><br><span class="line">|Hi I heard about Spark             |[hi, i, heard, about, spark]              |5     |</span><br><span class="line">|I wish Java could use case classes |[i, wish, java, could, use, case, classes]|7     |</span><br><span class="line">|Logistic,regression,models,are,neat|[logistic, regression, models, are, neat] |5     |</span><br><span class="line">+-----------------------------------+------------------------------------------+------+</span><br></pre></td></tr></table></figure>
<h2 id="4-10-StopWordsRemover"><a href="#4-10-StopWordsRemover" class="headerlink" title="4.10 StopWordsRemover"></a>4.10 StopWordsRemover</h2><p>停用词过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def StopWordsRemover(df,inputCol=&quot;words&quot;, outputCol=&quot;words2&quot;,add_stopwords=[]):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    停用词过滤</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import StopWordsRemover</span><br><span class="line">    remover = StopWordsRemover(inputCol=inputCol, outputCol=outputCol).setStopWords(add_stopwords)</span><br><span class="line">    # 添加停用词</span><br><span class="line">    # remover = remover.setStopWords(Array(&quot;saw&quot;,&quot;Mary&quot;))</span><br><span class="line">    removed = remover.transform(df)</span><br><span class="line">    return removed</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">StopWordsRemover Output</span><br><span class="line">+---+----------------------------+--------------------+</span><br><span class="line">|id |words                       |words2              |</span><br><span class="line">+---+----------------------------+--------------------+</span><br><span class="line">|0  |[I, saw, the, red, balloon] |[saw, red, balloon] |</span><br><span class="line">|1  |[Mary, had, a, little, lamb]|[Mary, little, lamb]|</span><br><span class="line">+---+----------------------------+--------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-11-NGram"><a href="#4-11-NGram" class="headerlink" title="4.11 NGram"></a>4.11 NGram</h2><p>把单词转成一个个连续词输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def NGram(df,n=2, inputCol=&quot;words&quot;, outputCol=&quot;ngrams&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    把单词转成一个个连续词输出</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import NGram</span><br><span class="line">    ngram = NGram(n=2, inputCol=inputCol, outputCol=outputCol)</span><br><span class="line">    ngramDF = ngram.transform(df)</span><br><span class="line">    return ngramDF</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line">NGram Output</span><br><span class="line">+---+--------------------------------------------+----------------------------------------------------------------------+</span><br><span class="line">|id |words                                       |ngrams                                                                |</span><br><span class="line">+---+--------------------------------------------+----------------------------------------------------------------------+</span><br><span class="line">|0  |[Hi, I, heard, about, Spark]                |[Hi I, I heard, heard about, about Spark]                             |</span><br><span class="line">|1  |[I, wish, python, could, use, case, classes]|[I wish, wish python, python could, could use, use case, case classes]|</span><br><span class="line">|2  |[Logistic, regression, models, are, neat]   |[Logistic regression, regression models, models are, are neat]        |</span><br><span class="line">+---+--------------------------------------------+----------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-12-DCT"><a href="#4-12-DCT" class="headerlink" title="4.12 DCT"></a>4.12 DCT</h2><p>离散余弦变换是将时域的N维实数序列转换成频域的N维实数序列的过程(有点类似离散傅里叶变换)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def DCT(df, inverse=False, inputCol=&quot;features&quot;, outputCol=&quot;featuresDCT&quot;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    离散余弦变换是将时域的N维实数序列转换成频域的N维实数序列的过程(有点类似离散傅里叶变换)。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from pyspark.ml.feature import DCT</span><br><span class="line">    dct = DCT(inverse=inverse, inputCol=inputCol, outputCol=outputCol)</span><br><span class="line">    dctDf = dct.transform(df)</span><br><span class="line">    return dctDf</span><br></pre></td></tr></table></figure>
<h2 id="4-13-ChiSqSelector"><a href="#4-13-ChiSqSelector" class="headerlink" title="4.13 ChiSqSelector"></a>4.13 ChiSqSelector</h2><p>ChiSqSelector代表卡方特征选择。ChiSqSelector根据独立卡方检验，然后选取类别标签主要依赖的特征。 selectorType Supported options: numTopFeatures (default), percentile and fpr. - 1、numTopFeatures：通过卡方检验选取最具有预测能力的Top(num)个特征 - 2、percentile：类似于上一种方法，但是选取一小部分特征而不是固定(num)个特征 - 3、fpr:选择P值低于门限值的特征，这样就可以控制false positive rate来进行特征选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def ChiSqSelector(df, featuresCol=&#x27;features&#x27;, labelCol=&#x27;label&#x27;,numTopFeatures=50,outputCol=&quot;selectedFeatures&quot;,</span><br><span class="line">    selectorType=&#x27;numTopFeatures&#x27;, percentile=0.1, fpr=0.05):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    ChiSqSelector代表卡方特征选择。ChiSqSelector根据独立卡方检验，然后选取类别标签主要依赖的特征。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # selectorType Supported options: numTopFeatures (default), percentile and fpr.</span><br><span class="line">    # 1、numTopFeatures：通过卡方检验选取最具有预测能力的Top(num)个特征</span><br><span class="line">    # 2、percentile：类似于上一种方法，但是选取一小部分特征而不是固定(num)个特征</span><br><span class="line">    # 3、fpr:选择P值低于门限值的特征，这样就可以控制false positive rate来进行特征选择</span><br><span class="line">    from pyspark.ml.feature import ChiSqSelector</span><br><span class="line">    selector = ChiSqSelector(</span><br><span class="line">                            numTopFeatures = numTopFeatures,</span><br><span class="line">                            featuresCol = featuresCol,</span><br><span class="line">                            outputCol = outputCol,</span><br><span class="line">                            labelCol = labelCol,</span><br><span class="line">                            selectorType = selectorType,</span><br><span class="line">                            percentile = percentile,</span><br><span class="line">                            fpr = fpr</span><br><span class="line">                            )</span><br><span class="line">    result = selector.fit(df).transform(df)</span><br><span class="line">    print(&quot;ChiSqSelector output with top %d features selected&quot; % selector.getNumTopFeatures())</span><br><span class="line">    return result</span><br><span class="line">上述代码输出结果如下：</span><br><span class="line"></span><br><span class="line"># ChiSqSelector Output with top 1 features selected</span><br><span class="line"></span><br><span class="line">+---+------------------+-------+----------------+</span><br><span class="line">| id|          features|  label|selectedFeatures|</span><br><span class="line">+---+------------------+-------+----------------+</span><br><span class="line">|  7|[0.0,0.0,18.0,1.0]|    1.0|          [18.0]|</span><br><span class="line">|  8|[0.0,1.0,12.0,0.0]|    0.0|          [12.0]|</span><br><span class="line">|  9|[1.0,0.0,15.0,0.1]|    0.0|          [15.0]|</span><br><span class="line">+---+------------------+-------+----------------+</span><br></pre></td></tr></table></figure>
<h2 id="4-14-PearsonCorr"><a href="#4-14-PearsonCorr" class="headerlink" title="4.14 PearsonCorr"></a>4.14 PearsonCorr</h2><p>皮尔逊相关系数( Pearson correlation coefficient） 用于度量两个变量X和Y之间的相关（线性相关），其值介于-1与1之间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def PearsonCorr(df,featureCol=&#x27;feature&#x27;,labelCol=&#x27;label&#x27;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    皮尔逊相关系数( Pearson correlation coefficient）</span><br><span class="line">    用于度量两个变量X和Y之间的相关（线性相关），其值介于-1与1之间。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return df.corr(featureCol,labelCol,method=None)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>推荐工程</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
        <tag>pyspark</tag>
      </tags>
  </entry>
  <entry>
    <title>工作必备工具：git</title>
    <url>/2022/08/10/git-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<!-- # PySpark特征工程入门总结 -->
<h1 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h1>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>打工人</tag>
      </tags>
  </entry>
</search>
